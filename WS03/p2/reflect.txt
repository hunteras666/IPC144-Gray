///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #3 (P2)
Full Name  : Rajesh Sah
Student ID#: 175281211
Email      : rsah@myseneca.ca
Section    : ZRA

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1.
==> The submitted code for the number of servings to the available coffee bag weights is - 

        printf(" 1|       %d         |      %d      |   %d   |\n", ((CFE1_type == 'L' || CFE1_type == 'l') || (coffee_strength == 'M' || coffee_strength == 'm')) || ((CFE1_type == 'R' || CFE1_type == 'r') || (coffee_strength == 'R' || coffee_strength == 'r')), ((daily_servings >= 1 && daily_servings <= 4) && (CFE1_bag_weight >= 0 && CFE1_bag_weight <= 250)) || ((daily_servings > 4 && daily_servings <= 9) && (CFE1_bag_weight > 250 && CFE1_bag_weight <= 500)) || (daily_servings >= 10 && (CFE1_bag_weight > 500 && CFE1_bag_weight <= 1000)), ((CFE1_cream_or_not == 'Y' || CFE1_cream_or_not == 'y') && (coffee_with_cream == 'Y' || coffee_with_cream == 'y')) || ((CFE1_cream_or_not == 'N' || CFE1_cream_or_not == 'n') && (coffee_with_cream == 'N' || coffee_with_cream == 'n')));

        printf(" 2|       %d         |      %d      |   %d   |\n", ((CFE2_type == 'L' || CFE2_type == 'l') && (coffee_strength == 'M' || coffee_strength == 'm')) || ((CFE2_type == 'R' || CFE2_type == 'r') && (coffee_strength == 'R' || coffee_strength == 'r')), ((daily_servings >= 1 && daily_servings <= 4) && (CFE2_bag_weight >= 0 && CFE2_bag_weight <= 250)) || ((daily_servings > 4 && daily_servings <= 9) && (CFE2_bag_weight > 250 && CFE2_bag_weight <= 500)) || (daily_servings >= 10 && (CFE2_bag_weight > 500 && CFE2_bag_weight <= 1000)), ((CFE2_cream_or_not == 'Y' || CFE2_cream_or_not == 'y') && (coffee_with_cream == 'Y' || coffee_with_cream == 'y')) || ((CFE2_cream_or_not == 'N' || CFE2_cream_or_not == 'n') && (coffee_with_cream == 'N' || coffee_with_cream == 'n')));

        printf(" 3|       %d         |      %d      |   %d   |\n", ((CFE3_type == 'L' || CFE3_type == 'l') && (coffee_strength == 'M' || coffee_strength == 'm')) || ((CFE3_type == 'R' || CFE3_type == 'r') && (coffee_strength == 'R' || coffee_strength == 'r')), ((daily_servings >= 1 && daily_servings <= 4) && (CFE3_bag_weight >= 0 && CFE3_bag_weight <= 250)) || ((daily_servings > 4 && daily_servings <= 9) && (CFE3_bag_weight > 250 && CFE3_bag_weight <= 500)) || (daily_servings >= 10 && (CFE3_bag_weight > 500 && CFE3_bag_weight <= 1000)), ((CFE3_cream_or_not == 'Y' || CFE3_cream_or_not == 'y') && (coffee_with_cream == 'Y' || coffee_with_cream == 'y')) || ((CFE3_cream_or_not == 'N' || CFE3_cream_or_not == 'n') && (coffee_with_cream == 'N' || coffee_with_cream == 'n')));

     1. a) I have used 4 relational expressions and they are - 
                    ==, >=, <=, and >.
     1. b) I have used 2 logical expressions and they are -
                &&, and ||. 


2.
==> the two different ways are 
      - Demorgan's Law 


#include <stdio.h>
int main() {
   const int product1_ID = 111;
   const int product2_ID = 222; 
   const int product3_ID = 111;


int unique = !((product1_ID == product3_ID) || (product2_ID == product3_ID));

printf("9. Based on product ID, product 3 is unique -> %d\n", unique);

return 0;
}


     -Without Demorgan's law

#include <stdio.h>
int main() {
   const int product1_ID = 111;
   const int product2_ID = 222; 
   const int product3_ID = 111;

int unique = 1;
if (product1_ID == product3_ID) {
    unique = 0;
} else if (product2_ID == product3_ID) {
    unique = 0;
}

printf("9. Based on product ID, product 3 is unique -> %d\n", unique);

return 0;
}
 
==> I have not used Demorgan's in w3p1 #output9


3.
==> The two ways I can organize variables are - 
  A)      // Declaring variables
          // Variables used to represent the product data records
             char CFE1_type, CFE2_type, CFE3_type;
             int CFE1_bag_weight, CFE2_bag_weight, CFE3_bag_weight;
             char CFE1_cream_or_not, CFE2_cream_or_not, CFE3_cream_or_not;

          // Variables used to store the user-input values for user preferences
             char coffee_strength, coffee_with_cream;
             int daily_servings;

B)    // Declaring variables
      char CFE1_type, CFE2_type, CFE3_type,CFE1_cream_or_not, CFE2_cream_or_not, CFE3_cream_or_not,coffee_strength, coffee_with_cream;
      int  CFE1_bag_weight, CFE2_bag_weight, CFE3_bag_weight, daily_servings;

               